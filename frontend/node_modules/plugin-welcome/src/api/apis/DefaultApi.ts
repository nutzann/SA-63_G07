/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntArea,
    EntAreaFromJSON,
    EntAreaToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntLevel,
    EntLevelFromJSON,
    EntLevelToJSON,
    EntStatistic,
    EntStatisticFromJSON,
    EntStatisticToJSON,
} from '../models';

export interface CreateAreaRequest {
    area: EntArea;
}

export interface CreateDiseaseRequest {
    disease: EntDisease;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateLevelRequest {
    level: EntLevel;
}

export interface CreateStatisticRequest {
    statistic: EntStatistic;
}

export interface DeleteAreaRequest {
    id: number;
}

export interface DeleteDiseaseRequest {
    id: number;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeletePlalevelceRequest {
    id: number;
}

export interface DeleteStatisticRequest {
    id: number;
}

export interface GetDiseaseRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetLevelRequest {
    id: number;
}

export interface GetStatisticRequest {
    id: number;
}

export interface ListAreaRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListLevelRequest {
    limit?: number;
    offset?: number;
}

export interface ListStatisticRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDiseaseRequest {
    id: number;
    disease: EntDisease;
}

export interface UpdateEmployeeRequest {
    id: number;
    employee: EntEmployee;
}

export interface UpdateLevelRequest {
    id: number;
    level: EntLevel;
}

export interface UpdateStatisticRequest {
    id: number;
    statistic: EntStatistic;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create area
     * Create area
     */
    async createAreaRaw(requestParameters: CreateAreaRequest): Promise<runtime.ApiResponse<EntArea>> {
        if (requestParameters.area === null || requestParameters.area === undefined) {
            throw new runtime.RequiredError('area','Required parameter requestParameters.area was null or undefined when calling createArea.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/areas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAreaToJSON(requestParameters.area),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAreaFromJSON(jsonValue));
    }

    /**
     * Create area
     * Create area
     */
    async createArea(requestParameters: CreateAreaRequest): Promise<EntArea> {
        const response = await this.createAreaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create disease
     * Create disease
     */
    async createDiseaseRaw(requestParameters: CreateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling createDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * Create disease
     * Create disease
     */
    async createDisease(requestParameters: CreateDiseaseRequest): Promise<EntDisease> {
        const response = await this.createDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create level
     * Create level
     */
    async createLevelRaw(requestParameters: CreateLevelRequest): Promise<runtime.ApiResponse<EntLevel>> {
        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling createLevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/levels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntLevelToJSON(requestParameters.level),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelFromJSON(jsonValue));
    }

    /**
     * Create level
     * Create level
     */
    async createLevel(requestParameters: CreateLevelRequest): Promise<EntLevel> {
        const response = await this.createLevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create statistic
     * Create statistic
     */
    async createStatisticRaw(requestParameters: CreateStatisticRequest): Promise<runtime.ApiResponse<EntStatistic>> {
        if (requestParameters.statistic === null || requestParameters.statistic === undefined) {
            throw new runtime.RequiredError('statistic','Required parameter requestParameters.statistic was null or undefined when calling createStatistic.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statistics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatisticToJSON(requestParameters.statistic),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatisticFromJSON(jsonValue));
    }

    /**
     * Create statistic
     * Create statistic
     */
    async createStatistic(requestParameters: CreateStatisticRequest): Promise<EntStatistic> {
        const response = await this.createStatisticRaw(requestParameters);
        return await response.value();
    }

    /**
     * get area by ID
     * Delete a area entity by ID
     */
    async deleteAreaRaw(requestParameters: DeleteAreaRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteArea.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get area by ID
     * Delete a area entity by ID
     */
    async deleteArea(requestParameters: DeleteAreaRequest): Promise<object> {
        const response = await this.deleteAreaRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDiseaseRaw(requestParameters: DeleteDiseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDisease(requestParameters: DeleteDiseaseRequest): Promise<object> {
        const response = await this.deleteDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get level by ID
     * Delete a level entity by ID
     */
    async deletePlalevelceRaw(requestParameters: DeletePlalevelceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePlalevelce.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/levels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get level by ID
     * Delete a level entity by ID
     */
    async deletePlalevelce(requestParameters: DeletePlalevelceRequest): Promise<object> {
        const response = await this.deletePlalevelceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statistic by ID
     * Delete a statistic entity by ID
     */
    async deleteStatisticRaw(requestParameters: DeleteStatisticRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStatistic.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get statistic by ID
     * Delete a statistic entity by ID
     */
    async deleteStatistic(requestParameters: DeleteStatisticRequest): Promise<object> {
        const response = await this.deleteStatisticRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDiseaseRaw(requestParameters: GetDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * get disease by ID
     * Get a disease entity by ID
     */
    async getDisease(requestParameters: GetDiseaseRequest): Promise<EntDisease> {
        const response = await this.getDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get level by ID
     * Get a level entity by ID
     */
    async getLevelRaw(requestParameters: GetLevelRequest): Promise<runtime.ApiResponse<EntLevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/levels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelFromJSON(jsonValue));
    }

    /**
     * get level by ID
     * Get a level entity by ID
     */
    async getLevel(requestParameters: GetLevelRequest): Promise<EntLevel> {
        const response = await this.getLevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get statistic by ID
     * Get a statistic entity by ID
     */
    async getStatisticRaw(requestParameters: GetStatisticRequest): Promise<runtime.ApiResponse<EntStatistic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStatistic.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatisticFromJSON(jsonValue));
    }

    /**
     * get statistic by ID
     * Get a statistic entity by ID
     */
    async getStatistic(requestParameters: GetStatisticRequest): Promise<EntStatistic> {
        const response = await this.getStatisticRaw(requestParameters);
        return await response.value();
    }

    /**
     * list area entities
     * List area entities
     */
    async listAreaRaw(requestParameters: ListAreaRequest): Promise<runtime.ApiResponse<Array<EntArea>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAreaFromJSON));
    }

    /**
     * list area entities
     * List area entities
     */
    async listArea(requestParameters: ListAreaRequest): Promise<Array<EntArea>> {
        const response = await this.listAreaRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list level entities
     * List level entities
     */
    async listLevelRaw(requestParameters: ListLevelRequest): Promise<runtime.ApiResponse<Array<EntLevel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntLevelFromJSON));
    }

    /**
     * list level entities
     * List level entities
     */
    async listLevel(requestParameters: ListLevelRequest): Promise<Array<EntLevel>> {
        const response = await this.listLevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list statistic entities
     * List statistic entities
     */
    async listStatisticRaw(requestParameters: ListStatisticRequest): Promise<runtime.ApiResponse<Array<EntStatistic>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStatisticFromJSON));
    }

    /**
     * list statistic entities
     * List statistic entities
     */
    async listStatistic(requestParameters: ListStatisticRequest): Promise<Array<EntStatistic>> {
        const response = await this.listStatisticRaw(requestParameters);
        return await response.value();
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDiseaseRaw(requestParameters: UpdateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisease.');
        }

        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling updateDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDisease(requestParameters: UpdateDiseaseRequest): Promise<EntDisease> {
        const response = await this.updateDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployeeRaw(requestParameters: UpdateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEmployee.');
        }

        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling updateEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployee(requestParameters: UpdateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.updateEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update level by ID
     * Update a level entity by ID
     */
    async updateLevelRaw(requestParameters: UpdateLevelRequest): Promise<runtime.ApiResponse<EntLevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLevel.');
        }

        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling updateLevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/levels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntLevelToJSON(requestParameters.level),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntLevelFromJSON(jsonValue));
    }

    /**
     * update level by ID
     * Update a level entity by ID
     */
    async updateLevel(requestParameters: UpdateLevelRequest): Promise<EntLevel> {
        const response = await this.updateLevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * update statistic by ID
     * Update a statistic entity by ID
     */
    async updateStatisticRaw(requestParameters: UpdateStatisticRequest): Promise<runtime.ApiResponse<EntStatistic>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStatistic.');
        }

        if (requestParameters.statistic === null || requestParameters.statistic === undefined) {
            throw new runtime.RequiredError('statistic','Required parameter requestParameters.statistic was null or undefined when calling updateStatistic.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/statistics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntStatisticToJSON(requestParameters.statistic),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStatisticFromJSON(jsonValue));
    }

    /**
     * update statistic by ID
     * Update a statistic entity by ID
     */
    async updateStatistic(requestParameters: UpdateStatisticRequest): Promise<EntStatistic> {
        const response = await this.updateStatisticRaw(requestParameters);
        return await response.value();
    }

}
