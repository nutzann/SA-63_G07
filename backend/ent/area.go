// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/nutzann/app/ent/area"
	"github.com/nutzann/app/ent/disease"
	"github.com/nutzann/app/ent/employee"
	"github.com/nutzann/app/ent/level"
	"github.com/nutzann/app/ent/statistic"
)

// Area is the model entity for the Area schema.
type Area struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AreaQuery when eager-loading is set.
	Edges          AreaEdges `json:"edges"`
	disease_area   *int
	employee_area  *int
	level_area     *int
	statistic_area *int
}

// AreaEdges holds the relations/edges for other nodes in the graph.
type AreaEdges struct {
	// Disease holds the value of the disease edge.
	Disease *Disease
	// Statistic holds the value of the statistic edge.
	Statistic *Statistic
	// Level holds the value of the level edge.
	Level *Level
	// Employee holds the value of the employee edge.
	Employee *Employee
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DiseaseOrErr returns the Disease value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AreaEdges) DiseaseOrErr() (*Disease, error) {
	if e.loadedTypes[0] {
		if e.Disease == nil {
			// The edge disease was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: disease.Label}
		}
		return e.Disease, nil
	}
	return nil, &NotLoadedError{edge: "disease"}
}

// StatisticOrErr returns the Statistic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AreaEdges) StatisticOrErr() (*Statistic, error) {
	if e.loadedTypes[1] {
		if e.Statistic == nil {
			// The edge statistic was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statistic.Label}
		}
		return e.Statistic, nil
	}
	return nil, &NotLoadedError{edge: "statistic"}
}

// LevelOrErr returns the Level value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AreaEdges) LevelOrErr() (*Level, error) {
	if e.loadedTypes[2] {
		if e.Level == nil {
			// The edge level was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: level.Label}
		}
		return e.Level, nil
	}
	return nil, &NotLoadedError{edge: "level"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AreaEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[3] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Area) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Area) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // disease_area
		&sql.NullInt64{}, // employee_area
		&sql.NullInt64{}, // level_area
		&sql.NullInt64{}, // statistic_area
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Area fields.
func (a *Area) assignValues(values ...interface{}) error {
	if m, n := len(values), len(area.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	values = values[1:]
	if len(values) == len(area.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field disease_area", value)
		} else if value.Valid {
			a.disease_area = new(int)
			*a.disease_area = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_area", value)
		} else if value.Valid {
			a.employee_area = new(int)
			*a.employee_area = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field level_area", value)
		} else if value.Valid {
			a.level_area = new(int)
			*a.level_area = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field statistic_area", value)
		} else if value.Valid {
			a.statistic_area = new(int)
			*a.statistic_area = int(value.Int64)
		}
	}
	return nil
}

// QueryDisease queries the disease edge of the Area.
func (a *Area) QueryDisease() *DiseaseQuery {
	return (&AreaClient{config: a.config}).QueryDisease(a)
}

// QueryStatistic queries the statistic edge of the Area.
func (a *Area) QueryStatistic() *StatisticQuery {
	return (&AreaClient{config: a.config}).QueryStatistic(a)
}

// QueryLevel queries the level edge of the Area.
func (a *Area) QueryLevel() *LevelQuery {
	return (&AreaClient{config: a.config}).QueryLevel(a)
}

// QueryEmployee queries the employee edge of the Area.
func (a *Area) QueryEmployee() *EmployeeQuery {
	return (&AreaClient{config: a.config}).QueryEmployee(a)
}

// Update returns a builder for updating this Area.
// Note that, you need to call Area.Unwrap() before calling this method, if this Area
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Area) Update() *AreaUpdateOne {
	return (&AreaClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Area) Unwrap() *Area {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Area is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Area) String() string {
	var builder strings.Builder
	builder.WriteString("Area(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Areas is a parsable slice of Area.
type Areas []*Area

func (a Areas) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
