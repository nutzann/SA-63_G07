// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/nutzann/app/ent/area"
	"github.com/nutzann/app/ent/disease"
	"github.com/nutzann/app/ent/employee"
	"github.com/nutzann/app/ent/level"
	"github.com/nutzann/app/ent/statistic"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArea      = "Area"
	TypeDisease   = "Disease"
	TypeEmployee  = "Employee"
	TypeLevel     = "Level"
	TypeStatistic = "Statistic"
)

// AreaMutation represents an operation that mutate the Areas
// nodes in the graph.
type AreaMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	disease          *int
	cleareddisease   bool
	statistic        *int
	clearedstatistic bool
	level            *int
	clearedlevel     bool
	employee         *int
	clearedemployee  bool
	done             bool
	oldValue         func(context.Context) (*Area, error)
}

var _ ent.Mutation = (*AreaMutation)(nil)

// areaOption allows to manage the mutation configuration using functional options.
type areaOption func(*AreaMutation)

// newAreaMutation creates new mutation for $n.Name.
func newAreaMutation(c config, op Op, opts ...areaOption) *AreaMutation {
	m := &AreaMutation{
		config:        c,
		op:            op,
		typ:           TypeArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAreaID sets the id field of the mutation.
func withAreaID(id int) areaOption {
	return func(m *AreaMutation) {
		var (
			err   error
			once  sync.Once
			value *Area
		)
		m.oldValue = func(ctx context.Context) (*Area, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Area.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArea sets the old Area of the mutation.
func withArea(node *Area) areaOption {
	return func(m *AreaMutation) {
		m.oldValue = func(context.Context) (*Area, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AreaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *AreaMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *AreaMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Area.
// If the Area object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AreaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *AreaMutation) ResetName() {
	m.name = nil
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *AreaMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *AreaMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *AreaMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *AreaMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *AreaMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// SetStatisticID sets the statistic edge to Statistic by id.
func (m *AreaMutation) SetStatisticID(id int) {
	m.statistic = &id
}

// ClearStatistic clears the statistic edge to Statistic.
func (m *AreaMutation) ClearStatistic() {
	m.clearedstatistic = true
}

// StatisticCleared returns if the edge statistic was cleared.
func (m *AreaMutation) StatisticCleared() bool {
	return m.clearedstatistic
}

// StatisticID returns the statistic id in the mutation.
func (m *AreaMutation) StatisticID() (id int, exists bool) {
	if m.statistic != nil {
		return *m.statistic, true
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StatisticID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) StatisticIDs() (ids []int) {
	if id := m.statistic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *AreaMutation) ResetStatistic() {
	m.statistic = nil
	m.clearedstatistic = false
}

// SetLevelID sets the level edge to Level by id.
func (m *AreaMutation) SetLevelID(id int) {
	m.level = &id
}

// ClearLevel clears the level edge to Level.
func (m *AreaMutation) ClearLevel() {
	m.clearedlevel = true
}

// LevelCleared returns if the edge level was cleared.
func (m *AreaMutation) LevelCleared() bool {
	return m.clearedlevel
}

// LevelID returns the level id in the mutation.
func (m *AreaMutation) LevelID() (id int, exists bool) {
	if m.level != nil {
		return *m.level, true
	}
	return
}

// LevelIDs returns the level ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// LevelID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) LevelIDs() (ids []int) {
	if id := m.level; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLevel reset all changes of the "level" edge.
func (m *AreaMutation) ResetLevel() {
	m.level = nil
	m.clearedlevel = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *AreaMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *AreaMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *AreaMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *AreaMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *AreaMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Op returns the operation name.
func (m *AreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Area).
func (m *AreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AreaMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, area.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case area.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case area.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Area field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case area.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AreaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AreaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Area numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Area nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AreaMutation) ResetField(name string) error {
	switch name {
	case area.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.disease != nil {
		edges = append(edges, area.EdgeDisease)
	}
	if m.statistic != nil {
		edges = append(edges, area.EdgeStatistic)
	}
	if m.level != nil {
		edges = append(edges, area.EdgeLevel)
	}
	if m.employee != nil {
		edges = append(edges, area.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AreaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case area.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeStatistic:
		if id := m.statistic; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeLevel:
		if id := m.level; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AreaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddisease {
		edges = append(edges, area.EdgeDisease)
	}
	if m.clearedstatistic {
		edges = append(edges, area.EdgeStatistic)
	}
	if m.clearedlevel {
		edges = append(edges, area.EdgeLevel)
	}
	if m.clearedemployee {
		edges = append(edges, area.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AreaMutation) EdgeCleared(name string) bool {
	switch name {
	case area.EdgeDisease:
		return m.cleareddisease
	case area.EdgeStatistic:
		return m.clearedstatistic
	case area.EdgeLevel:
		return m.clearedlevel
	case area.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AreaMutation) ClearEdge(name string) error {
	switch name {
	case area.EdgeDisease:
		m.ClearDisease()
		return nil
	case area.EdgeStatistic:
		m.ClearStatistic()
		return nil
	case area.EdgeLevel:
		m.ClearLevel()
		return nil
	case area.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Area unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AreaMutation) ResetEdge(name string) error {
	switch name {
	case area.EdgeDisease:
		m.ResetDisease()
		return nil
	case area.EdgeStatistic:
		m.ResetStatistic()
		return nil
	case area.EdgeLevel:
		m.ResetLevel()
		return nil
	case area.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Area edge %s", name)
}

// DiseaseMutation represents an operation that mutate the Diseases
// nodes in the graph.
type DiseaseMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	area          map[int]struct{}
	removedarea   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Disease, error)
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows to manage the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for $n.Name.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the id field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DiseaseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DiseaseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DiseaseMutation) ResetName() {
	m.name = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *DiseaseMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *DiseaseMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *DiseaseMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *DiseaseMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *DiseaseMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, disease.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, disease.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, disease.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Email        *string
	_Name         *string
	_User_id      *string
	clearedFields map[string]struct{}
	area          map[int]struct{}
	removedarea   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the Email field.
func (m *EmployeeMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *EmployeeMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *EmployeeMutation) ResetEmail() {
	m._Email = nil
}

// SetName sets the Name field.
func (m *EmployeeMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *EmployeeMutation) ResetName() {
	m._Name = nil
}

// SetUserID sets the User_id field.
func (m *EmployeeMutation) SetUserID(s string) {
	m._User_id = &s
}

// UserID returns the User_id value in the mutation.
func (m *EmployeeMutation) UserID() (r string, exists bool) {
	v := m._User_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old User_id value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID reset all changes of the "User_id" field.
func (m *EmployeeMutation) ResetUserID() {
	m._User_id = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *EmployeeMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *EmployeeMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *EmployeeMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *EmployeeMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *EmployeeMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Email != nil {
		fields = append(fields, employee.FieldEmail)
	}
	if m._Name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m._User_id != nil {
		fields = append(fields, employee.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldEmail:
		return m.Email()
	case employee.FieldName:
		return m.Name()
	case employee.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldEmail:
		return m.OldEmail(ctx)
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldEmail:
		m.ResetEmail()
		return nil
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, employee.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, employee.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// LevelMutation represents an operation that mutate the Levels
// nodes in the graph.
type LevelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	area          map[int]struct{}
	removedarea   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Level, error)
}

var _ ent.Mutation = (*LevelMutation)(nil)

// levelOption allows to manage the mutation configuration using functional options.
type levelOption func(*LevelMutation)

// newLevelMutation creates new mutation for $n.Name.
func newLevelMutation(c config, op Op, opts ...levelOption) *LevelMutation {
	m := &LevelMutation{
		config:        c,
		op:            op,
		typ:           TypeLevel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLevelID sets the id field of the mutation.
func withLevelID(id int) levelOption {
	return func(m *LevelMutation) {
		var (
			err   error
			once  sync.Once
			value *Level
		)
		m.oldValue = func(ctx context.Context) (*Level, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Level.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLevel sets the old Level of the mutation.
func withLevel(node *Level) levelOption {
	return func(m *LevelMutation) {
		m.oldValue = func(context.Context) (*Level, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LevelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LevelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *LevelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *LevelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *LevelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Level.
// If the Level object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *LevelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *LevelMutation) ResetName() {
	m.name = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *LevelMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *LevelMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *LevelMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *LevelMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *LevelMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *LevelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Level).
func (m *LevelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *LevelMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, level.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *LevelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case level.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *LevelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case level.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Level field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LevelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case level.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Level field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *LevelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *LevelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LevelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Level numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *LevelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *LevelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *LevelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Level nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *LevelMutation) ResetField(name string) error {
	switch name {
	case level.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Level field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *LevelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, level.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *LevelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case level.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *LevelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, level.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *LevelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case level.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *LevelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *LevelMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *LevelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Level unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *LevelMutation) ResetEdge(name string) error {
	switch name {
	case level.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Level edge %s", name)
}

// StatisticMutation represents an operation that mutate the Statistics
// nodes in the graph.
type StatisticMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	area          map[int]struct{}
	removedarea   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Statistic, error)
}

var _ ent.Mutation = (*StatisticMutation)(nil)

// statisticOption allows to manage the mutation configuration using functional options.
type statisticOption func(*StatisticMutation)

// newStatisticMutation creates new mutation for $n.Name.
func newStatisticMutation(c config, op Op, opts ...statisticOption) *StatisticMutation {
	m := &StatisticMutation{
		config:        c,
		op:            op,
		typ:           TypeStatistic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatisticID sets the id field of the mutation.
func withStatisticID(id int) statisticOption {
	return func(m *StatisticMutation) {
		var (
			err   error
			once  sync.Once
			value *Statistic
		)
		m.oldValue = func(ctx context.Context) (*Statistic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statistic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatistic sets the old Statistic of the mutation.
func withStatistic(node *Statistic) statisticOption {
	return func(m *StatisticMutation) {
		m.oldValue = func(context.Context) (*Statistic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatisticMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatisticMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StatisticMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *StatisticMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *StatisticMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Statistic.
// If the Statistic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StatisticMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *StatisticMutation) ResetName() {
	m.name = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *StatisticMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *StatisticMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *StatisticMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *StatisticMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *StatisticMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *StatisticMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Statistic).
func (m *StatisticMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StatisticMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, statistic.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StatisticMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statistic.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StatisticMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statistic.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Statistic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statistic.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StatisticMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StatisticMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StatisticMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StatisticMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatisticMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statistic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StatisticMutation) ResetField(name string) error {
	switch name {
	case statistic.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StatisticMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StatisticMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StatisticMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StatisticMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StatisticMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StatisticMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StatisticMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StatisticMutation) ResetEdge(name string) error {
	switch name {
	case statistic.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Statistic edge %s", name)
}
